//WAP to implement queue using linked list
#include<stdio.h>
#include<stdlib.h>
#include<limits.h>
typedef struct node
{
    int data;
    struct node *next;
}Node;
Node* front = NULL, *rear = NULL;
void enqueue(int ele)
{
    Node* temp = (Node*)malloc(sizeof(Node));
    if (temp == NULL)
    {
        printf("Queue Overflow !!!\n");
    }
    temp -> data = ele;
    temp -> next = NULL;
    if (front == NULL)
    {
        front = rear = temp;
    }
    else
    {
        rear -> next = temp;
        rear = temp;
    }
    printf("Inserted %d into the Queue\n",ele);
}
int dequeue()
{
    if (rear == NULL)
    {
        printf("Queue Underflow !!!\n");
        return INT_MIN;
    }
    else
    {
        Node *temp = front;
        front = front -> next;
        if (front == NULL)
        {
            rear = NULL;
        }
        int val = temp -> data;
        free(temp);
        return val;
    }
}
int peek()
{
    if (front == NULL)
    {
        printf("Queue is empty !!!\n");
        return INT_MIN;
    }
    else
    {
        return (front -> data);
    }
}
void show()
{
    if (front == NULL)
    {
        printf("Queue is empty !!!\n");
    }
    else
    {
        printf("Queue elements are = \n");
        Node* temp = front;
        while (temp != NULL)
        {
            printf("%d ",temp -> data);
            temp = temp -> next;
        }
        printf("\n");
    }
}
int main(){
    while(1)
    {
		printf("1. Enqueue\n");
		printf("2. Dequeue\n");
		printf("3. Peek\n");
		printf("4. Display\n");
		printf("5. Exit\n");
		int choice, data,result;
		printf("Enter choice : ");
		scanf("%d", &choice);
		switch(choice){
			case 1:
                printf("Enter Element = ");
                scanf("%d",&data);
                enqueue(data);
				break;
			case 2:
                result = dequeue();
                if (result != INT_MIN)
                {
                    printf("%d is removed from Queue\n",result);
                }
				break;
			case 3:
                result = peek();
                if (result != INT_MIN)
                {
                    printf("Top element of queue is %d\n",result);
                }
				break;
			case 4:
                show();
				break;
			case 5:
				exit(0);
				break;
			default:
				printf("Invalid choice !!!!!\n");	
		}
		printf("\n\n");
		system("pause");
	}
	return 0;
}
